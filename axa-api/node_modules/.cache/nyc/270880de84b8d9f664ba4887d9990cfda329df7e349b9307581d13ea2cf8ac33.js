var cov_6we7vlqwm=function(){var path="C:\\Users\\alber\\Desktop\\AXA\\axa-api\\logic\\user\\authenticate\\index.js";var hash="d70c82d63b1f383b653ee8e64dfe5b3800fbd994";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\alber\\Desktop\\AXA\\axa-api\\logic\\user\\authenticate\\index.js",statementMap:{"0":{start:{line:1,column:19},end:{line:1,column:39}},"1":{start:{line:2,column:25},end:{line:2,column:44}},"2":{start:{line:17,column:0},end:{line:31,column:1}},"3":{start:{line:19,column:4},end:{line:19,column:38}},"4":{start:{line:20,column:4},end:{line:20,column:37}},"5":{start:{line:21,column:4},end:{line:21,column:29}},"6":{start:{line:23,column:4},end:{line:28,column:8}},"7":{start:{line:24,column:19},end:{line:24,column:48}},"8":{start:{line:25,column:12},end:{line:25,column:56}},"9":{start:{line:25,column:23},end:{line:25,column:56}},"10":{start:{line:27,column:12},end:{line:27,column:44}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:17},end:{line:17,column:18}},loc:{start:{line:17,column:37},end:{line:31,column:1}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:23,column:11},end:{line:23,column:12}},loc:{start:{line:23,column:20},end:{line:28,column:5}},line:23}},branchMap:{"0":{loc:{start:{line:25,column:12},end:{line:25,column:56}},type:"if",locations:[{start:{line:25,column:12},end:{line:25,column:56}},{start:{line:25,column:12},end:{line:25,column:56}}],line:25}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"d70c82d63b1f383b653ee8e64dfe5b3800fbd994"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{validate}=(cov_6we7vlqwm.s[0]++,require('axa-utils'));const{models:{User}}=(cov_6we7vlqwm.s[1]++,require('axa-data'));/**
 * Authenticates a user
 * 
 * @param {string} id - the id of the Client
 * @param {string} email - the email of the Client
 * 
 * @throws {Error} - if user does not exists.
 * @throws {Error} - if password does not match.
 * 
 * @returns {String} - returns the user id as the Object id
 */cov_6we7vlqwm.s[2]++;module.exports=function(id,email){cov_6we7vlqwm.f[0]++;cov_6we7vlqwm.s[3]++;validate.string(email,'username');cov_6we7vlqwm.s[4]++;validate.email(email,'username');cov_6we7vlqwm.s[5]++;validate.string(id,'id');cov_6we7vlqwm.s[6]++;return(async()=>{cov_6we7vlqwm.f[1]++;const user=(cov_6we7vlqwm.s[7]++,await User.findOne({email}));cov_6we7vlqwm.s[8]++;if(!user){cov_6we7vlqwm.b[0][0]++;cov_6we7vlqwm.s[9]++;throw Error('Wrong credentials.');}else{cov_6we7vlqwm.b[0][1]++;}cov_6we7vlqwm.s[10]++;return await user._id.toString();})();};