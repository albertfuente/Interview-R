var cov_f0cnipmc=function(){var path="C:\\Users\\alber\\Desktop\\AXA\\axa-api\\logic\\user\\retrieve\\index.js";var hash="256e8046f8d703aee5fbf28d1f8c34807f0d5067";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\alber\\Desktop\\AXA\\axa-api\\logic\\user\\retrieve\\index.js",statementMap:{"0":{start:{line:1,column:19},end:{line:1,column:39}},"1":{start:{line:2,column:25},end:{line:2,column:44}},"2":{start:{line:14,column:0},end:{line:27,column:1}},"3":{start:{line:16,column:4},end:{line:16,column:29}},"4":{start:{line:18,column:4},end:{line:25,column:8}},"5":{start:{line:19,column:19},end:{line:19,column:67}},"6":{start:{line:21,column:12},end:{line:21,column:72}},"7":{start:{line:21,column:23},end:{line:21,column:72}},"8":{start:{line:23,column:12},end:{line:23,column:29}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:14,column:17},end:{line:14,column:18}},loc:{start:{line:14,column:30},end:{line:27,column:1}},line:14},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:11},end:{line:18,column:12}},loc:{start:{line:18,column:20},end:{line:25,column:5}},line:18}},branchMap:{"0":{loc:{start:{line:21,column:12},end:{line:21,column:72}},type:"if",locations:[{start:{line:21,column:12},end:{line:21,column:72}},{start:{line:21,column:12},end:{line:21,column:72}}],line:21}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"256e8046f8d703aee5fbf28d1f8c34807f0d5067"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{validate}=(cov_f0cnipmc.s[0]++,require('axa-utils'));const{models:{User}}=(cov_f0cnipmc.s[1]++,require('axa-data'));/**
 * Retreives one user
 * 
 * @param {*} id 
 * 
 * @throws {Error} - if user does not exists.
 * 
 * @returns {Object}
*/cov_f0cnipmc.s[2]++;module.exports=function(id){cov_f0cnipmc.f[0]++;cov_f0cnipmc.s[3]++;validate.string(id,'id');cov_f0cnipmc.s[4]++;return(async()=>{cov_f0cnipmc.f[1]++;const user=(cov_f0cnipmc.s[5]++,await User.findOne({_id:id},{__v:0}).lean());cov_f0cnipmc.s[6]++;if(!user){cov_f0cnipmc.b[0][0]++;cov_f0cnipmc.s[7]++;throw Error(`User with id ${id} does not exist.`);}else{cov_f0cnipmc.b[0][1]++;}cov_f0cnipmc.s[8]++;return await user;})();};