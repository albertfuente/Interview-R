var cov_7sce0n2wb=function(){var path="C:\\Users\\alber\\Desktop\\AXA\\axa-api\\logic\\user\\retrieve-userId\\index.js";var hash="e0b2f3eb975f964317a3561ce0b6e22848cb29f9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\alber\\Desktop\\AXA\\axa-api\\logic\\user\\retrieve-userId\\index.js",statementMap:{"0":{start:{line:1,column:19},end:{line:1,column:39}},"1":{start:{line:2,column:25},end:{line:2,column:44}},"2":{start:{line:24,column:0},end:{line:39,column:1}},"3":{start:{line:26,column:4},end:{line:26,column:29}},"4":{start:{line:28,column:4},end:{line:37,column:8}},"5":{start:{line:29,column:19},end:{line:29,column:88}},"6":{start:{line:31,column:12},end:{line:31,column:72}},"7":{start:{line:31,column:23},end:{line:31,column:72}},"8":{start:{line:33,column:12},end:{line:33,column:22}},"9":{start:{line:35,column:12},end:{line:35,column:27}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:24,column:17},end:{line:24,column:18}},loc:{start:{line:24,column:30},end:{line:39,column:1}},line:24},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:11},end:{line:28,column:12}},loc:{start:{line:28,column:20},end:{line:37,column:5}},line:28}},branchMap:{"0":{loc:{start:{line:31,column:12},end:{line:31,column:72}},type:"if",locations:[{start:{line:31,column:12},end:{line:31,column:72}},{start:{line:31,column:12},end:{line:31,column:72}}],line:31}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"e0b2f3eb975f964317a3561ce0b6e22848cb29f9"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const{validate}=(cov_7sce0n2wb.s[0]++,require('axa-utils'));const{models:{User}}=(cov_7sce0n2wb.s[1]++,require('axa-data'));/**
 * Retreives one user
 * 
 * @param {*} id 
 * 
 * @throws {Error} - if user does not exists.
 * 
 * @returns {Object}
*/ /**
 * Retreives one user
 * 
 * @param {string} id - the id of the Client
 * 
 * @throws {Error} - if User does not exist
 * 
 * @returns {string} - returns the Client id
 */cov_7sce0n2wb.s[2]++;module.exports=function(id){cov_7sce0n2wb.f[0]++;cov_7sce0n2wb.s[3]++;validate.string(id,'id');cov_7sce0n2wb.s[4]++;return(async()=>{cov_7sce0n2wb.f[1]++;const user=(cov_7sce0n2wb.s[5]++,await User.findOne({_id:id},{_id:0,password:0,__v:0}).lean());cov_7sce0n2wb.s[6]++;if(!user){cov_7sce0n2wb.b[0][0]++;cov_7sce0n2wb.s[7]++;throw Error(`User with id ${id} does not exist.`);}else{cov_7sce0n2wb.b[0][1]++;}cov_7sce0n2wb.s[8]++;id=user.id;cov_7sce0n2wb.s[9]++;return await id;})();};